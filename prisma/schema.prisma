generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Medicine {
  id             String           @id(map: "idx_90662_PRIMARY") @default(cuid()) @db.VarChar(191)
  userId         String           @db.VarChar(191)
  name           String           @db.VarChar(191)
  createdAt      DateTime         @default(now()) @db.Timestamptz(6)
  updatedAt      DateTime         @updatedAt @db.Timestamptz(6)
  user           User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  MedicineDetail MedicineDetail[]

  @@index([userId], map: "idx_90662_Medicine_userId_idx")
}

model MedicineDetail {
  id              String        @id(map: "idx_90668_PRIMARY") @default(cuid()) @db.VarChar(191)
  medicineId      String        @db.VarChar(191)
  createdAt       DateTime      @default(now()) @db.Timestamptz(6)
  updatedAt       DateTime      @updatedAt @db.Timestamptz(6)
  medicalRecordId String        @db.VarChar(191)
  medicine        Medicine      @relation(fields: [medicineId], references: [id], onDelete: Cascade)
  medicalRecord   MedicalRecord @relation(fields: [medicalRecordId], references: [id], onDelete: Cascade)

  @@index([medicalRecordId], map: "idx_90668_MedicineDetail_medicalRecordId_idx")
  @@index([medicineId], map: "idx_90668_MedicineDetail_medicineId_idx")
}

model Patient {
  id            String          @id(map: "idx_90674_PRIMARY") @default(cuid()) @db.VarChar(191)
  userId        String          @db.VarChar(191)
  name          String          @db.VarChar(191)
  phone         String?         @db.VarChar(191)
  address       String?         @db.VarChar(191)
  gender        Patient_gender
  birthDate     DateTime        @db.Timestamptz(6)
  createdAt     DateTime        @default(now()) @db.Timestamptz(6)
  updatedAt     DateTime        @updatedAt @db.Timestamptz(6)
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  MedicalRecord MedicalRecord[]

  @@index([userId], map: "idx_90674_Patient_userId_idx")
}

model MedicalRecord {
  id             String           @id(map: "idx_90656_PRIMARY") @default(cuid()) @db.VarChar(191)
  patientId      String           @db.VarChar(191)
  complaint      String           @db.VarChar(700)
  diagnosis      String           @db.VarChar(700)
  treatment      String?          @db.VarChar(400)
  note           String           @db.VarChar(700)
  pay            Int
  createdAt      DateTime         @default(now()) @db.Timestamptz(6)
  updatedAt      DateTime         @updatedAt @db.Timestamptz(6)
  labNote        String?          @db.VarChar(700)
  checkup        String?          @db.VarChar(400)
  patient        Patient          @relation(fields: [patientId], references: [id], onDelete: Cascade)
  Attachment     Attachment[]
  MedicineDetail MedicineDetail[]

  @@index([patientId], map: "idx_90656_MedicalRecord_patientId_idx")
}

model Attachment {
  id              String        @id(map: "idx_90644_PRIMARY") @default(cuid()) @db.VarChar(191)
  medicalRecordId String        @db.VarChar(191)
  createdAt       DateTime      @default(now()) @db.Timestamptz(6)
  updatedAt       DateTime      @updatedAt @db.Timestamptz(6)
  fileId          String?       @db.VarChar(191)
  medicalRecord   MedicalRecord @relation(fields: [medicalRecordId], references: [id], onDelete: Cascade)
  File            File?         @relation(fields: [fileId], references: [id])

  @@index([fileId], map: "idx_90644_Attachment_fileId_idx")
  @@index([medicalRecordId], map: "idx_90644_Attachment_medicalRecordId_idx")
}

model File {
  id          String       @id(map: "idx_90650_PRIMARY") @default(cuid()) @db.VarChar(191)
  type        String       @db.VarChar(191)
  url         String       @db.VarChar(191)
  mime        String       @db.VarChar(191)
  name        String       @db.VarChar(191)
  extension   String       @db.VarChar(191)
  size        Int
  height      Int?
  width       Int?
  createdAt   DateTime     @default(now()) @db.Timestamptz(6)
  attachments Attachment[]
}

model Account {
  id                String  @id(map: "idx_90639_PRIMARY") @default(cuid()) @db.VarChar(191)
  userId            String  @db.VarChar(191)
  type              String  @db.VarChar(191)
  provider          String  @db.VarChar(191)
  providerAccountId String  @db.VarChar(191)
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String? @db.VarChar(191)
  scope             String? @db.VarChar(191)
  id_token          String?
  session_state     String? @db.VarChar(191)
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId], map: "idx_90639_Account_provider_providerAccountId_key")
  @@index([userId], map: "idx_90639_Account_userId_idx")
}

model Session {
  id           String   @id(map: "idx_90680_PRIMARY") @default(cuid()) @db.VarChar(191)
  sessionToken String   @unique(map: "idx_90680_Session_sessionToken_key") @db.VarChar(191)
  userId       String   @db.VarChar(191)
  expires      DateTime @db.Timestamptz(6)
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "idx_90680_Session_userId_idx")
}

model User {
  id            String     @id(map: "idx_90692_PRIMARY") @default(cuid()) @db.VarChar(191)
  name          String?    @db.VarChar(191)
  email         String?    @unique(map: "idx_90692_User_email_key") @db.VarChar(191)
  emailVerified DateTime?  @db.Timestamptz(6)
  image         String?    @db.VarChar(191)
  isSubscribed  Boolean    @default(false)
  password      String?    @db.VarChar(191)
  phone         String?    @db.VarChar(191)
  role          User_role  @default(user)
  Patient       Patient[]
  Medicine      Medicine[]
  Account       Account[]
  Session       Session[]
}

model Subscription {
  id              String              @id(map: "idx_90685_PRIMARY") @db.VarChar(191)
  subscriberId    String              @db.VarChar(191)
  adminId         String              @db.VarChar(191)
  status          Subscription_status @default(inactive)
  createdAt       DateTime            @default(now()) @db.Timestamptz(6)
  updatedAt       DateTime            @db.Timestamptz(6)
  subscribedUntil DateTime?           @db.Timestamptz(6)

  @@index([adminId], map: "idx_90685_Subscription_adminId_idx")
  @@index([subscriberId], map: "idx_90685_Subscription_subscriberId_idx")
}

model VerificationToken {
  identifier String   @db.VarChar(191)
  token      String   @unique(map: "idx_90699_VerificationToken_token_key") @db.VarChar(191)
  expires    DateTime @db.Timestamptz(6)

  @@unique([identifier, token], map: "idx_90699_VerificationToken_identifier_token_key")
}

enum Subscription_status {
  active
  inactive
}

enum Patient_gender {
  male
  female
}

enum User_role {
  user
  admin
}

enum patient_gender {
  male
  female
}

enum subscription_status {
  active
  inactive
}

enum user_role {
  user
  admin
}
