// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

enum Gender {
    male
    female
}

model Patient {
    id            String          @id @default(cuid())
    user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId        String
    name          String
    phone         String          @unique
    address       String
    gender        Gender
    age           Int
    createdAt     DateTime        @default(now())
    updatedAt     DateTime        @updatedAt
    MedicalRecord MedicalRecord[]

    @@index([userId])
}

model MedicalRecord {
    id         String       @id @default(cuid())
    patient    Patient      @relation(fields: [patientId], references: [id], onDelete: Cascade)
    patientId  String
    complaint  String
    diagnosis  String
    treatment  String
    note       String
    pay        Int
    createdAt  DateTime     @default(now())
    updatedAt  DateTime     @updatedAt
    Attachment Attachment[]

    @@index([patientId])
}

model Attachment {
    id              String        @id @default(cuid())
    medicalRecord   MedicalRecord @relation(fields: [medicalRecordId], references: [id], onDelete: Cascade)
    medicalRecordId String
    createdAt       DateTime      @default(now())
    updatedAt       DateTime      @updatedAt
    File            File?         @relation(fields: [fileId], references: [id])
    fileId          String?

    @@index([medicalRecordId])
    @@index([fileId])
}

model File {
    id          String       @id @default(cuid())
    attachments Attachment[]

    type      String
    url       String
    mime      String
    name      String
    extension String
    size      Int
    height    Int?
    width     Int?
    createdAt DateTime @default(now())
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    Patient       Patient[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
