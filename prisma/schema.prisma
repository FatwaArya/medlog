generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Medicine {
  id             String           @id @default(cuid())
  userId         String
  name           String
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  MedicineDetail MedicineDetail[]
}

model MedicineDetail {
  id              String        @id @default(cuid())
  medicineId      String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  medicalRecordId String
  medicine        Medicine      @relation(fields: [medicineId], references: [id], onDelete: Cascade)
  medicalRecord   MedicalRecord @relation(fields: [medicalRecordId], references: [id], onDelete: Cascade)

  @@index([medicineId])
  @@index([medicalRecordId])
  @@index([createdAt])
}

model Patient {
  id            String          @id @default(cuid())
  userId        String
  name          String
  phone         String?
  address       String?
  gender        Gender
  birthDate     DateTime
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  MedicalRecord MedicalRecord[]

  @@index([createdAt])
  @@index([userId])
  @@fulltext([name])
}

model MedicalRecord {
  id             String           @id @default(cuid())
  patientId      String
  complaint      String           @db.VarChar(700)
  diagnosis      String           @db.VarChar(700)
  treatment      String?          @db.VarChar(400)
  note           String           @db.VarChar(700)
  pay            Int
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  labNote        String?          @db.VarChar(700)
  checkup        String?          @db.VarChar(400)
  patient        Patient          @relation(fields: [patientId], references: [id], onDelete: Cascade)
  Attachment     Attachment[]
  MedicineDetail MedicineDetail[]

  @@index([patientId])
  @@index([createdAt])
  @@index([updatedAt])
}

model Attachment {
  id              String        @id @default(cuid())
  medicalRecordId String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  fileId          String?
  medicalRecord   MedicalRecord @relation(fields: [medicalRecordId], references: [id], onDelete: Cascade)
  File            File?         @relation(fields: [fileId], references: [id])

  @@index([medicalRecordId])
  @@index([fileId])
  @@index([createdAt])
}

model File {
  id          String       @id @default(cuid())
  type        String
  url         String
  mime        String
  name        String
  extension   String
  size        Int
  height      Int?
  width       Int?
  createdAt   DateTime     @default(now())
  attachments Attachment[]
}

model Subscription {
  id              String             @id @default(cuid())
  userId          String
  status          SubscriptionStatus @default(inactive)
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  subscribedUntil DateTime?

  @@index([createdAt])
  @@index([updatedAt])
}

// create a model to save remaining limit from redis
model RemainingLimit {
  id                 String           @id @default(cuid())
  userId             String           @unique
  patientLimit       Int?
  medicalRecordLimit Int?
  plan               SubscriptionPlan
  resetAt            String?
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt

  @@index([createdAt])
  @@index([updatedAt])
}

enum LimitType {
  patient
  medicalRecord
  attachment
  medicine
}

enum SubscriptionStatus {
  active
  inactive
}

enum SubscriptionPlan {
  free
  personal
  professional
}

enum Gender {
  male
  female
}

enum Role {
  user
  admin
}
